/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.controller;

import com.example.model.AuthToken;
import com.example.model.ErrorResponse;
import com.example.model.LoginRequest;
import com.example.model.RegisterRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-04T15:16:19.844067600+05:30[Asia/Calcutta]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "Authentication", description = "User registration, login, logout")
public interface AuthenticationApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v1/auth/login : Log in an existing user
     * Authenticates user credentials and returns a JWT Bearer token.
     *
     * @param loginRequest  (required)
     * @return Login successful. (status code 200)
     *         or Invalid credentials. (status code 401)
     */
    @Operation(
        operationId = "loginUser",
        summary = "Log in an existing user",
        description = "Authenticates user credentials and returns a JWT Bearer token.",
        tags = { "Authentication" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Login successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthToken.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid credentials.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/auth/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AuthToken> loginUser(
        @Parameter(name = "LoginRequest", description = "", required = true) @Valid @RequestBody LoginRequest loginRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"expiresIn\" : 3600, \"tokenType\" : \"Bearer\", \"token\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Order not found.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/auth/logout : Log out the current user
     * Invalidates the user&#39;s token on the server-side if session management is used (or client simply discards token).
     *
     * @return Successfully logged out (No Content). (status code 204)
     *         or Authentication information is missing or invalid. (status code 401)
     */
    @Operation(
        operationId = "logoutUser",
        summary = "Log out the current user",
        description = "Invalidates the user's token on the server-side if session management is used (or client simply discards token).",
        tags = { "Authentication" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successfully logged out (No Content)."),
            @ApiResponse(responseCode = "401", description = "Authentication information is missing or invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/auth/logout",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> logoutUser(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Order not found.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/auth/register : Register a new user
     * Creates a new user account. Location is optional.
     *
     * @param registerRequest  (required)
     * @return User successfully registered (response body typically minimal or empty). (status code 201)
     *         or Invalid input (e.g., username exists, invalid email/password format). (status code 400)
     */
    @Operation(
        operationId = "registerUser",
        summary = "Register a new user",
        description = "Creates a new user account. Location is optional.",
        tags = { "Authentication" },
        responses = {
            @ApiResponse(responseCode = "201", description = "User successfully registered (response body typically minimal or empty)."),
            @ApiResponse(responseCode = "400", description = "Invalid input (e.g., username exists, invalid email/password format).", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/auth/register",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> registerUser(
        @Parameter(name = "RegisterRequest", description = "", required = true) @Valid @RequestBody RegisterRequest registerRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Order not found.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
