/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.controller;

import com.example.model.ErrorResponse;
import com.example.model.PaginatedVehicleResponse;
import com.example.model.UpdateVehicleDetailsRequest;
import com.example.model.VehicleRequest;
import com.example.model.VehicleResponse;
import com.example.model.VehicleStatus;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-04T15:16:19.844067600+05:30[Asia/Calcutta]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "Vehicles", description = "Operations related to vehicle fleet")
public interface VehiclesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v1/vehicles : Add a new vehicle to the fleet
     * Adds a new vehicle. &#x60;availableCapacity&#x60; is automatically set equal to &#x60;capacity&#x60;. &#x60;vehicleStatus&#x60; defaults to &#39;Available&#39;.
     *
     * @param vehicleRequest  (required)
     * @return Vehicle successfully added. (status code 201)
     *         or Invalid request payload (e.g., duplicate registration number). (status code 400)
     *         or Authentication information is missing or invalid. (status code 401)
     */
    @Operation(
        operationId = "addVehicle",
        summary = "Add a new vehicle to the fleet",
        description = "Adds a new vehicle. `availableCapacity` is automatically set equal to `capacity`. `vehicleStatus` defaults to 'Available'.",
        tags = { "Vehicles" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Vehicle successfully added.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VehicleResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request payload (e.g., duplicate registration number).", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication information is missing or invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/vehicles",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<VehicleResponse> addVehicle(
        @Parameter(name = "VehicleRequest", description = "", required = true) @Valid @RequestBody VehicleRequest vehicleRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"availableCapacity\" : 350.5, \"registrationNumber\" : \"TN38AB1234\", \"vehicleType\" : \"Van\", \"capacity\" : 500.0, \"vehicleStatus\" : \"Available\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Order not found.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Order not found.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/vehicles/{registrationNumber} : Remove a vehicle
     * Deletes a vehicle from the fleet (sets status to &#39;Removed&#39; or deletes) only if not currently &#39;In Transit&#39;.
     *
     * @param registrationNumber Registration number of the vehicle to delete. (required)
     * @return Vehicle successfully removed (No Content). (status code 204)
     *         or Vehicle is active (&#39;In Transit&#39;) and cannot be removed. (status code 400)
     *         or Authentication information is missing or invalid. (status code 401)
     *         or The specified resource was not found. (status code 404)
     */
    @Operation(
        operationId = "deleteVehicle",
        summary = "Remove a vehicle",
        description = "Deletes a vehicle from the fleet (sets status to 'Removed' or deletes) only if not currently 'In Transit'.",
        tags = { "Vehicles" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Vehicle successfully removed (No Content)."),
            @ApiResponse(responseCode = "400", description = "Vehicle is active ('In Transit') and cannot be removed.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication information is missing or invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/vehicles/{registrationNumber}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteVehicle(
        @Parameter(name = "registrationNumber", description = "Registration number of the vehicle to delete.", required = true, in = ParameterIn.PATH) @PathVariable("registrationNumber") String registrationNumber
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Order not found.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Order not found.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Order not found.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/vehicles/{registrationNumber} : Get a vehicle by registration number
     * Retrieve the details of a specific vehicle by its registration number.
     *
     * @param registrationNumber The registration number of the vehicle to retrieve. (required)
     * @return Successfully retrieved the vehicle. (status code 200)
     *         or Authentication information is missing or invalid. (status code 401)
     *         or The specified resource was not found. (status code 404)
     */
    @Operation(
        operationId = "getVehicleByRegistrationNumber",
        summary = "Get a vehicle by registration number",
        description = "Retrieve the details of a specific vehicle by its registration number.",
        tags = { "Vehicles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved the vehicle.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VehicleResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication information is missing or invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/vehicles/{registrationNumber}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<VehicleResponse> getVehicleByRegistrationNumber(
        @Parameter(name = "registrationNumber", description = "The registration number of the vehicle to retrieve.", required = true, in = ParameterIn.PATH) @PathVariable("registrationNumber") String registrationNumber
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"availableCapacity\" : 350.5, \"registrationNumber\" : \"TN38AB1234\", \"vehicleType\" : \"Van\", \"capacity\" : 500.0, \"vehicleStatus\" : \"Available\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Order not found.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Order not found.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/vehicles : List all vehicles (Paginated)
     * Retrieves a paginated list of all vehicles with optional filtering and sorting.
     *
     * @param limit Maximum number of vehicles to return per page. (optional, default to 20)
     * @param offset Number of vehicles to skip for pagination. (optional, default to 0)
     * @param sortBy Field to sort vehicles by. Allowed fields: &#39;registrationNumber&#39;, &#39;vehicleType&#39;, &#39;capacity&#39;, &#39;availableCapacity&#39;, &#39;vehicleStatus&#39;. (optional)
     * @param sortDirection Sorting direction. (optional, default to asc)
     * @param registrationNumber Filter vehicles by registration number (partial match). (optional)
     * @param vehicleType Filter vehicles by type (e.g., Truck, Van). (optional)
     * @param vehicleStatus Filter vehicles by status. (optional)
     * @param minCapacity Filter vehicles with total capacity greater than or equal to this value. (optional)
     * @param minAvailableCapacity Filter vehicles with available capacity greater than or equal to this value. (optional)
     * @return Successfully retrieved the paginated list of vehicles. (status code 200)
     *         or Invalid query parameters. (status code 400)
     *         or Authentication information is missing or invalid. (status code 401)
     */
    @Operation(
        operationId = "listVehicles",
        summary = "List all vehicles (Paginated)",
        description = "Retrieves a paginated list of all vehicles with optional filtering and sorting.",
        tags = { "Vehicles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved the paginated list of vehicles.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PaginatedVehicleResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid query parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication information is missing or invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/vehicles",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PaginatedVehicleResponse> listVehicles(
        @Min(1) @Parameter(name = "limit", description = "Maximum number of vehicles to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "20") Integer limit,
        @Min(0) @Parameter(name = "offset", description = "Number of vehicles to skip for pagination.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false, defaultValue = "0") Integer offset,
        @Parameter(name = "sortBy", description = "Field to sort vehicles by. Allowed fields: 'registrationNumber', 'vehicleType', 'capacity', 'availableCapacity', 'vehicleStatus'.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortBy", required = false) String sortBy,
        @Parameter(name = "sortDirection", description = "Sorting direction.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortDirection", required = false, defaultValue = "asc") String sortDirection,
        @Parameter(name = "registrationNumber", description = "Filter vehicles by registration number (partial match).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "registrationNumber", required = false) String registrationNumber,
        @Parameter(name = "vehicleType", description = "Filter vehicles by type (e.g., Truck, Van).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vehicleType", required = false) String vehicleType,
        @Parameter(name = "vehicleStatus", description = "Filter vehicles by status.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vehicleStatus", required = false) VehicleStatus vehicleStatus,
        @Parameter(name = "minCapacity", description = "Filter vehicles with total capacity greater than or equal to this value.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "minCapacity", required = false) Integer minCapacity,
        @Parameter(name = "minAvailableCapacity", description = "Filter vehicles with available capacity greater than or equal to this value.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "minAvailableCapacity", required = false) Integer minAvailableCapacity
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"metadata\" : { \"totalItems\" : 153, \"offset\" : 40, \"limit\" : 20 }, \"data\" : [ { \"availableCapacity\" : 350.5, \"registrationNumber\" : \"TN38AB1234\", \"vehicleType\" : \"Van\", \"capacity\" : 500.0, \"vehicleStatus\" : \"Available\" }, { \"availableCapacity\" : 350.5, \"registrationNumber\" : \"TN38AB1234\", \"vehicleType\" : \"Van\", \"capacity\" : 500.0, \"vehicleStatus\" : \"Available\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Order not found.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Order not found.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/vehicles/{registrationNumber}/details : Update vehicle details (e.g., total capacity, status)
     * Updates changeable properties of a vehicle like its total capacity or status. Does not allow direct update of availableCapacity.
     *
     * @param registrationNumber Registration number of the vehicle to update. (required)
     * @param updateVehicleDetailsRequest  (required)
     * @return Vehicle details updated successfully. (status code 200)
     *         or Invalid request payload or update not allowed. (status code 400)
     *         or Authentication information is missing or invalid. (status code 401)
     *         or The specified resource was not found. (status code 404)
     */
    @Operation(
        operationId = "updateVehicleDetails",
        summary = "Update vehicle details (e.g., total capacity, status)",
        description = "Updates changeable properties of a vehicle like its total capacity or status. Does not allow direct update of availableCapacity.",
        tags = { "Vehicles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Vehicle details updated successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VehicleResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request payload or update not allowed.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication information is missing or invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/vehicles/{registrationNumber}/details",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<VehicleResponse> updateVehicleDetails(
        @Parameter(name = "registrationNumber", description = "Registration number of the vehicle to update.", required = true, in = ParameterIn.PATH) @PathVariable("registrationNumber") String registrationNumber,
        @Parameter(name = "UpdateVehicleDetailsRequest", description = "", required = true) @Valid @RequestBody UpdateVehicleDetailsRequest updateVehicleDetailsRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"availableCapacity\" : 350.5, \"registrationNumber\" : \"TN38AB1234\", \"vehicleType\" : \"Van\", \"capacity\" : 500.0, \"vehicleStatus\" : \"Available\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Order not found.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Order not found.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Order not found.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
