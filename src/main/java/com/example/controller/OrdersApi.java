/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.controller;

import org.springframework.format.annotation.DateTimeFormat;
import com.example.model.ErrorResponse;
import com.example.model.InternalProcessingStatus;
import java.time.LocalDate;
import com.example.model.OrderRequest;
import com.example.model.OrderResponse;
import com.example.model.OrderStatus;
import com.example.model.PaginatedOrderResponse;
import java.util.UUID;
import com.example.model.UpdateOrderRequest;
import com.example.model.UpdateOrderStatusRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-04T15:16:19.844067600+05:30[Asia/Calcutta]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "Orders", description = "Operations related to delivery orders")
public interface OrdersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v1/orders : Create a new delivery order
     * Adds a new delivery order to the system. Starts with internal status &#39;Processing&#39;.
     *
     * @param orderRequest  (required)
     * @return Order successfully created. (status code 201)
     *         or Invalid request payload. (status code 400)
     *         or Authentication information is missing or invalid. (status code 401)
     */
    @Operation(
        operationId = "createOrder",
        summary = "Create a new delivery order",
        description = "Adds a new delivery order to the system. Starts with internal status 'Processing'.",
        tags = { "Orders" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Order successfully created.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrderResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request payload.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication information is missing or invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/orders",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<OrderResponse> createOrder(
        @Parameter(name = "OrderRequest", description = "", required = true) @Valid @RequestBody OrderRequest orderRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"customerResponse\" : { \"phoneNumber\" : \"+919876543210\", \"address\" : { \"city\" : \"Coimbatore\", \"street\" : \"15, Race Course Road\", \"pinCode\" : \"641018\", \"latitude\" : 11.0168, \"state\" : \"Tamil Nadu\", \"longitude\" : 76.9558 }, \"name\" : \"Ravi Kumar\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"internalProcessingStatus\" : \"Processing\", \"deliveryType\" : 0, \"parcelDetails\" : { \"volume\" : 0.00915, \"weight\" : 4.5, \"dimensions\" : { \"length\" : 30.5, \"width\" : 20.0, \"height\" : 15.0 } }, \"sourceLocation\" : { \"city\" : \"Coimbatore\", \"street\" : \"15, Race Course Road\", \"pinCode\" : \"641018\", \"latitude\" : 11.0168, \"state\" : \"Tamil Nadu\", \"longitude\" : 76.9558 }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"assignedVehicleId\" : \"TN38AB1234\", \"deliveryDate\" : \"2025-05-04T15:30:00Z\", \"orderDate\" : \"2025-05-04T11:00:00Z\", \"status\" : \"Pending\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Order not found.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Order not found.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/orders/{id} : Delete a pending order
     * Deletes an order only if its logistics status is &#39;Pending&#39; and internal status allows deletion.
     *
     * @param id ID of the order to delete. (required)
     * @return Order successfully deleted (No Content). (status code 204)
     *         or Cannot delete order (e.g., not in Pending status). (status code 400)
     *         or Authentication information is missing or invalid. (status code 401)
     *         or The specified resource was not found. (status code 404)
     */
    @Operation(
        operationId = "deletePendingOrder",
        summary = "Delete a pending order",
        description = "Deletes an order only if its logistics status is 'Pending' and internal status allows deletion.",
        tags = { "Orders" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Order successfully deleted (No Content)."),
            @ApiResponse(responseCode = "400", description = "Cannot delete order (e.g., not in Pending status).", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication information is missing or invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/orders/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deletePendingOrder(
        @Parameter(name = "id", description = "ID of the order to delete.", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Order not found.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Order not found.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Order not found.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/orders/{id} : Get an order by ID
     * Retrieve the details of a specific order by its ID.
     *
     * @param id The ID (e.g., UUID or unique identifier) of the order to retrieve. (required)
     * @return Successfully retrieved the order. (status code 200)
     *         or Authentication information is missing or invalid. (status code 401)
     *         or The specified resource was not found. (status code 404)
     */
    @Operation(
        operationId = "getOrderById",
        summary = "Get an order by ID",
        description = "Retrieve the details of a specific order by its ID.",
        tags = { "Orders" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved the order.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrderResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication information is missing or invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/orders/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<OrderResponse> getOrderById(
        @Parameter(name = "id", description = "The ID (e.g., UUID or unique identifier) of the order to retrieve.", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"customerResponse\" : { \"phoneNumber\" : \"+919876543210\", \"address\" : { \"city\" : \"Coimbatore\", \"street\" : \"15, Race Course Road\", \"pinCode\" : \"641018\", \"latitude\" : 11.0168, \"state\" : \"Tamil Nadu\", \"longitude\" : 76.9558 }, \"name\" : \"Ravi Kumar\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"internalProcessingStatus\" : \"Processing\", \"deliveryType\" : 0, \"parcelDetails\" : { \"volume\" : 0.00915, \"weight\" : 4.5, \"dimensions\" : { \"length\" : 30.5, \"width\" : 20.0, \"height\" : 15.0 } }, \"sourceLocation\" : { \"city\" : \"Coimbatore\", \"street\" : \"15, Race Course Road\", \"pinCode\" : \"641018\", \"latitude\" : 11.0168, \"state\" : \"Tamil Nadu\", \"longitude\" : 76.9558 }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"assignedVehicleId\" : \"TN38AB1234\", \"deliveryDate\" : \"2025-05-04T15:30:00Z\", \"orderDate\" : \"2025-05-04T11:00:00Z\", \"status\" : \"Pending\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Order not found.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Order not found.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/orders/unassigned : Get unassigned, ready orders (Paginated)
     * Retrieves a paginated list of orders that are ready for dispatch but not yet assigned to any vehicle.
     *
     * @param limit Maximum number of orders to return per page. (optional, default to 20)
     * @param offset Number of orders to skip for pagination. (optional, default to 0)
     * @param sortBy Field to sort orders by. Allowed fields: &#39;orderDate&#39;, &#39;deliveryType&#39;. (optional)
     * @param sortDirection Sorting direction. (optional, default to asc)
     * @param deliveryType Filter by delivery type (0: Same Day, 1: Next Day, etc.). (optional)
     * @return Successfully retrieved unassigned, ready orders. (status code 200)
     *         or Invalid query parameters. (status code 400)
     *         or Authentication information is missing or invalid. (status code 401)
     */
    @Operation(
        operationId = "getUnassignedOrders",
        summary = "Get unassigned, ready orders (Paginated)",
        description = "Retrieves a paginated list of orders that are ready for dispatch but not yet assigned to any vehicle.",
        tags = { "Orders" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved unassigned, ready orders.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PaginatedOrderResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid query parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication information is missing or invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/orders/unassigned",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PaginatedOrderResponse> getUnassignedOrders(
        @Min(1) @Parameter(name = "limit", description = "Maximum number of orders to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "20") Integer limit,
        @Min(0) @Parameter(name = "offset", description = "Number of orders to skip for pagination.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false, defaultValue = "0") Integer offset,
        @Parameter(name = "sortBy", description = "Field to sort orders by. Allowed fields: 'orderDate', 'deliveryType'.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortBy", required = false) String sortBy,
        @Parameter(name = "sortDirection", description = "Sorting direction.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortDirection", required = false, defaultValue = "asc") String sortDirection,
        @Parameter(name = "deliveryType", description = "Filter by delivery type (0: Same Day, 1: Next Day, etc.).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deliveryType", required = false) Integer deliveryType
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"metadata\" : { \"totalItems\" : 153, \"offset\" : 40, \"limit\" : 20 }, \"data\" : [ { \"customerResponse\" : { \"phoneNumber\" : \"+919876543210\", \"address\" : { \"city\" : \"Coimbatore\", \"street\" : \"15, Race Course Road\", \"pinCode\" : \"641018\", \"latitude\" : 11.0168, \"state\" : \"Tamil Nadu\", \"longitude\" : 76.9558 }, \"name\" : \"Ravi Kumar\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"internalProcessingStatus\" : \"Processing\", \"deliveryType\" : 0, \"parcelDetails\" : { \"volume\" : 0.00915, \"weight\" : 4.5, \"dimensions\" : { \"length\" : 30.5, \"width\" : 20.0, \"height\" : 15.0 } }, \"sourceLocation\" : { \"city\" : \"Coimbatore\", \"street\" : \"15, Race Course Road\", \"pinCode\" : \"641018\", \"latitude\" : 11.0168, \"state\" : \"Tamil Nadu\", \"longitude\" : 76.9558 }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"assignedVehicleId\" : \"TN38AB1234\", \"deliveryDate\" : \"2025-05-04T15:30:00Z\", \"orderDate\" : \"2025-05-04T11:00:00Z\", \"status\" : \"Pending\" }, { \"customerResponse\" : { \"phoneNumber\" : \"+919876543210\", \"address\" : { \"city\" : \"Coimbatore\", \"street\" : \"15, Race Course Road\", \"pinCode\" : \"641018\", \"latitude\" : 11.0168, \"state\" : \"Tamil Nadu\", \"longitude\" : 76.9558 }, \"name\" : \"Ravi Kumar\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"internalProcessingStatus\" : \"Processing\", \"deliveryType\" : 0, \"parcelDetails\" : { \"volume\" : 0.00915, \"weight\" : 4.5, \"dimensions\" : { \"length\" : 30.5, \"width\" : 20.0, \"height\" : 15.0 } }, \"sourceLocation\" : { \"city\" : \"Coimbatore\", \"street\" : \"15, Race Course Road\", \"pinCode\" : \"641018\", \"latitude\" : 11.0168, \"state\" : \"Tamil Nadu\", \"longitude\" : 76.9558 }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"assignedVehicleId\" : \"TN38AB1234\", \"deliveryDate\" : \"2025-05-04T15:30:00Z\", \"orderDate\" : \"2025-05-04T11:00:00Z\", \"status\" : \"Pending\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Order not found.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Order not found.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/orders : List all orders (Paginated)
     * Retrieves a paginated list of orders with optional filtering and sorting.
     *
     * @param limit Maximum number of orders to return per page. (optional, default to 20)
     * @param offset Number of orders to skip for pagination. (optional, default to 0)
     * @param sortBy Field to sort orders by. Allowed fields: &#39;orderDate&#39;, &#39;deliveryType&#39;, &#39;status&#39;, &#39;customerName&#39;. (optional)
     * @param sortDirection Sorting direction. (optional, default to desc)
     * @param status Filter orders by logistics status. (optional)
     * @param internalProcessingStatus Filter orders by internal processing status. (optional)
     * @param customerName Filter orders by customer name (partial match). (optional)
     * @param deliveryType Filter orders by delivery type (0: Same Day, 1: Next Day, etc.). (optional)
     * @param assignedVehicleId Filter orders by assigned vehicle registration number. (optional)
     * @param orderDateFrom Filter orders placed on or after this date (YYYY-MM-DD). (optional)
     * @param orderDateTo Filter orders placed on or before this date (YYYY-MM-DD). (optional)
     * @return Successfully retrieved the paginated list of orders. (status code 200)
     *         or Invalid query parameters. (status code 400)
     *         or Authentication information is missing or invalid. (status code 401)
     */
    @Operation(
        operationId = "listOrders",
        summary = "List all orders (Paginated)",
        description = "Retrieves a paginated list of orders with optional filtering and sorting.",
        tags = { "Orders" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved the paginated list of orders.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PaginatedOrderResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid query parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication information is missing or invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/orders",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PaginatedOrderResponse> listOrders(
        @Min(1) @Parameter(name = "limit", description = "Maximum number of orders to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "20") Integer limit,
        @Min(0) @Parameter(name = "offset", description = "Number of orders to skip for pagination.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false, defaultValue = "0") Integer offset,
        @Parameter(name = "sortBy", description = "Field to sort orders by. Allowed fields: 'orderDate', 'deliveryType', 'status', 'customerName'.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortBy", required = false) String sortBy,
        @Parameter(name = "sortDirection", description = "Sorting direction.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortDirection", required = false, defaultValue = "desc") String sortDirection,
        @Parameter(name = "status", description = "Filter orders by logistics status.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "status", required = false) OrderStatus status,
        @Parameter(name = "internalProcessingStatus", description = "Filter orders by internal processing status.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "internalProcessingStatus", required = false) InternalProcessingStatus internalProcessingStatus,
        @Parameter(name = "customerName", description = "Filter orders by customer name (partial match).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "customerName", required = false) String customerName,
        @Parameter(name = "deliveryType", description = "Filter orders by delivery type (0: Same Day, 1: Next Day, etc.).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deliveryType", required = false) Integer deliveryType,
        @Parameter(name = "assignedVehicleId", description = "Filter orders by assigned vehicle registration number.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "assignedVehicleId", required = false) String assignedVehicleId,
        @Parameter(name = "orderDateFrom", description = "Filter orders placed on or after this date (YYYY-MM-DD).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "orderDateFrom", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate orderDateFrom,
        @Parameter(name = "orderDateTo", description = "Filter orders placed on or before this date (YYYY-MM-DD).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "orderDateTo", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate orderDateTo
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"metadata\" : { \"totalItems\" : 153, \"offset\" : 40, \"limit\" : 20 }, \"data\" : [ { \"customerResponse\" : { \"phoneNumber\" : \"+919876543210\", \"address\" : { \"city\" : \"Coimbatore\", \"street\" : \"15, Race Course Road\", \"pinCode\" : \"641018\", \"latitude\" : 11.0168, \"state\" : \"Tamil Nadu\", \"longitude\" : 76.9558 }, \"name\" : \"Ravi Kumar\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"internalProcessingStatus\" : \"Processing\", \"deliveryType\" : 0, \"parcelDetails\" : { \"volume\" : 0.00915, \"weight\" : 4.5, \"dimensions\" : { \"length\" : 30.5, \"width\" : 20.0, \"height\" : 15.0 } }, \"sourceLocation\" : { \"city\" : \"Coimbatore\", \"street\" : \"15, Race Course Road\", \"pinCode\" : \"641018\", \"latitude\" : 11.0168, \"state\" : \"Tamil Nadu\", \"longitude\" : 76.9558 }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"assignedVehicleId\" : \"TN38AB1234\", \"deliveryDate\" : \"2025-05-04T15:30:00Z\", \"orderDate\" : \"2025-05-04T11:00:00Z\", \"status\" : \"Pending\" }, { \"customerResponse\" : { \"phoneNumber\" : \"+919876543210\", \"address\" : { \"city\" : \"Coimbatore\", \"street\" : \"15, Race Course Road\", \"pinCode\" : \"641018\", \"latitude\" : 11.0168, \"state\" : \"Tamil Nadu\", \"longitude\" : 76.9558 }, \"name\" : \"Ravi Kumar\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"internalProcessingStatus\" : \"Processing\", \"deliveryType\" : 0, \"parcelDetails\" : { \"volume\" : 0.00915, \"weight\" : 4.5, \"dimensions\" : { \"length\" : 30.5, \"width\" : 20.0, \"height\" : 15.0 } }, \"sourceLocation\" : { \"city\" : \"Coimbatore\", \"street\" : \"15, Race Course Road\", \"pinCode\" : \"641018\", \"latitude\" : 11.0168, \"state\" : \"Tamil Nadu\", \"longitude\" : 76.9558 }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"assignedVehicleId\" : \"TN38AB1234\", \"deliveryDate\" : \"2025-05-04T15:30:00Z\", \"orderDate\" : \"2025-05-04T11:00:00Z\", \"status\" : \"Pending\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Order not found.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Order not found.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /api/v1/orders/{id} : Update editable order details
     * Allows partial updates to certain order fields (e.g., delivery address) if the order is in a modifiable state (e.g., internal status &#39;Processing&#39;).
     *
     * @param id ID of the order to update. (required)
     * @param updateOrderRequest  (required)
     * @return Order details updated successfully. (status code 200)
     *         or Cannot update order (e.g., invalid field or order state). (status code 400)
     *         or Authentication information is missing or invalid. (status code 401)
     *         or The specified resource was not found. (status code 404)
     */
    @Operation(
        operationId = "updateOrderDetails",
        summary = "Update editable order details",
        description = "Allows partial updates to certain order fields (e.g., delivery address) if the order is in a modifiable state (e.g., internal status 'Processing').",
        tags = { "Orders" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Order details updated successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrderResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Cannot update order (e.g., invalid field or order state).", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication information is missing or invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/v1/orders/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<OrderResponse> updateOrderDetails(
        @Parameter(name = "id", description = "ID of the order to update.", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "UpdateOrderRequest", description = "", required = true) @Valid @RequestBody UpdateOrderRequest updateOrderRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"customerResponse\" : { \"phoneNumber\" : \"+919876543210\", \"address\" : { \"city\" : \"Coimbatore\", \"street\" : \"15, Race Course Road\", \"pinCode\" : \"641018\", \"latitude\" : 11.0168, \"state\" : \"Tamil Nadu\", \"longitude\" : 76.9558 }, \"name\" : \"Ravi Kumar\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"internalProcessingStatus\" : \"Processing\", \"deliveryType\" : 0, \"parcelDetails\" : { \"volume\" : 0.00915, \"weight\" : 4.5, \"dimensions\" : { \"length\" : 30.5, \"width\" : 20.0, \"height\" : 15.0 } }, \"sourceLocation\" : { \"city\" : \"Coimbatore\", \"street\" : \"15, Race Course Road\", \"pinCode\" : \"641018\", \"latitude\" : 11.0168, \"state\" : \"Tamil Nadu\", \"longitude\" : 76.9558 }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"assignedVehicleId\" : \"TN38AB1234\", \"deliveryDate\" : \"2025-05-04T15:30:00Z\", \"orderDate\" : \"2025-05-04T11:00:00Z\", \"status\" : \"Pending\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Order not found.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Order not found.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Order not found.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/orders/{id}/status : Update the logistics status of an order
     * Updates the primary logistics status (Pending, Out for Delivery, etc.) of an existing order. Define allowed transitions in business logic.
     *
     * @param id The ID of the order to update. (required)
     * @param updateOrderStatusRequest  (required)
     * @return Successfully updated the order status. (status code 200)
     *         or Invalid status transition or request. (status code 400)
     *         or Authentication information is missing or invalid. (status code 401)
     *         or The specified resource was not found. (status code 404)
     */
    @Operation(
        operationId = "updateOrderStatus",
        summary = "Update the logistics status of an order",
        description = "Updates the primary logistics status (Pending, Out for Delivery, etc.) of an existing order. Define allowed transitions in business logic.",
        tags = { "Orders" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully updated the order status.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrderResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status transition or request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication information is missing or invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/orders/{id}/status",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<OrderResponse> updateOrderStatus(
        @Parameter(name = "id", description = "The ID of the order to update.", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "UpdateOrderStatusRequest", description = "", required = true) @Valid @RequestBody UpdateOrderStatusRequest updateOrderStatusRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"customerResponse\" : { \"phoneNumber\" : \"+919876543210\", \"address\" : { \"city\" : \"Coimbatore\", \"street\" : \"15, Race Course Road\", \"pinCode\" : \"641018\", \"latitude\" : 11.0168, \"state\" : \"Tamil Nadu\", \"longitude\" : 76.9558 }, \"name\" : \"Ravi Kumar\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"internalProcessingStatus\" : \"Processing\", \"deliveryType\" : 0, \"parcelDetails\" : { \"volume\" : 0.00915, \"weight\" : 4.5, \"dimensions\" : { \"length\" : 30.5, \"width\" : 20.0, \"height\" : 15.0 } }, \"sourceLocation\" : { \"city\" : \"Coimbatore\", \"street\" : \"15, Race Course Road\", \"pinCode\" : \"641018\", \"latitude\" : 11.0168, \"state\" : \"Tamil Nadu\", \"longitude\" : 76.9558 }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"assignedVehicleId\" : \"TN38AB1234\", \"deliveryDate\" : \"2025-05-04T15:30:00Z\", \"orderDate\" : \"2025-05-04T11:00:00Z\", \"status\" : \"Pending\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Order not found.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Order not found.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Order not found.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
